/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multistream";
exports.ids = ["vendor-chunks/multistream"];
exports.modules = {

/***/ "(ssr)/./node_modules/multistream/index.js":
/*!*******************************************!*\
  !*** ./node_modules/multistream/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! multistream. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst stream = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\")\nconst once = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\")\n\nfunction toStreams2Obj (s) {\n  return toStreams2(s, { objectMode: true, highWaterMark: 16 })\n}\n\nfunction toStreams2Buf (s) {\n  return toStreams2(s)\n}\n\nfunction toStreams2 (s, opts) {\n  if (!s || typeof s === 'function' || s._readableState) return s\n\n  const wrap = new stream.Readable(opts).wrap(s)\n  if (s.destroy) {\n    wrap.destroy = s.destroy.bind(s)\n  }\n  return wrap\n}\n\nclass MultiStream extends stream.Readable {\n  constructor (streams, opts) {\n    super({ ...opts, autoDestroy: true })\n\n    this._drained = false\n    this._forwarding = false\n    this._current = null\n    this._toStreams2 = (opts && opts.objectMode) ? toStreams2Obj : toStreams2Buf\n\n    if (typeof streams === 'function') {\n      this._queue = streams\n    } else {\n      this._queue = streams.map(this._toStreams2)\n      this._queue.forEach(stream => {\n        if (typeof stream !== 'function') this._attachErrorListener(stream)\n      })\n    }\n\n    this._next()\n  }\n\n  _read () {\n    this._drained = true\n    this._forward()\n  }\n\n  _forward () {\n    if (this._forwarding || !this._drained || !this._current) return\n    this._forwarding = true\n\n    let chunk\n    while (this._drained && (chunk = this._current.read()) !== null) {\n      this._drained = this.push(chunk)\n    }\n\n    this._forwarding = false\n  }\n\n  _destroy (err, cb) {\n    let streams = []\n    if (this._current) streams.push(this._current)\n    if (typeof this._queue !== 'function') streams = streams.concat(this._queue)\n\n    if (streams.length === 0) {\n      cb(err)\n    } else {\n      let counter = streams.length\n      let er = err\n      streams.forEach(stream => {\n        destroy(stream, err, err => {\n          er = er || err\n          if (--counter === 0) {\n            cb(er)\n          }\n        })\n      })\n    }\n  }\n\n  _next () {\n    this._current = null\n\n    if (typeof this._queue === 'function') {\n      this._queue((err, stream) => {\n        if (err) return this.destroy(err)\n        stream = this._toStreams2(stream)\n        this._attachErrorListener(stream)\n        this._gotNextStream(stream)\n      })\n    } else {\n      let stream = this._queue.shift()\n      if (typeof stream === 'function') {\n        stream = this._toStreams2(stream())\n        this._attachErrorListener(stream)\n      }\n      this._gotNextStream(stream)\n    }\n  }\n\n  _gotNextStream (stream) {\n    if (!stream) {\n      this.push(null)\n      return\n    }\n\n    this._current = stream\n    this._forward()\n\n    const onReadable = () => {\n      this._forward()\n    }\n\n    const onClose = () => {\n      if (!stream._readableState.ended && !stream.destroyed) {\n        const err = new Error('ERR_STREAM_PREMATURE_CLOSE')\n        err.code = 'ERR_STREAM_PREMATURE_CLOSE'\n        this.destroy(err)\n      }\n    }\n\n    const onEnd = () => {\n      this._current = null\n      stream.removeListener('readable', onReadable)\n      stream.removeListener('end', onEnd)\n      stream.removeListener('close', onClose)\n      stream.destroy()\n      this._next()\n    }\n\n    stream.on('readable', onReadable)\n    stream.once('end', onEnd)\n    stream.once('close', onClose)\n  }\n\n  _attachErrorListener (stream) {\n    if (!stream) return\n\n    const onError = (err) => {\n      stream.removeListener('error', onError)\n      this.destroy(err)\n    }\n\n    stream.once('error', onError)\n  }\n}\n\nMultiStream.obj = streams => (\n  new MultiStream(streams, { objectMode: true, highWaterMark: 16 })\n)\n\nmodule.exports = MultiStream\n\n// Normalize stream destroy w/ callback.\nfunction destroy (stream, err, cb) {\n  if (!stream.destroy || stream.destroyed) {\n    cb(err)\n  } else {\n    const callback = once(er => cb(er || err))\n    stream\n      .on('error', callback)\n      .on('close', () => callback())\n      .destroy(err, callback)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGlzdHJlYW0vaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxlQUFlLG1CQUFPLENBQUMseUVBQWlCO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQywrQ0FBTTs7QUFFM0I7QUFDQSx5QkFBeUIscUNBQXFDO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixxQ0FBcUM7QUFDbEU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXRhcGxleC11bWktbmV4dC1qcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9tdWx0aXN0cmVhbS9pbmRleC5qcz9kMjM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBtdWx0aXN0cmVhbS4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuY29uc3Qgc3RyZWFtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtJylcbmNvbnN0IG9uY2UgPSByZXF1aXJlKCdvbmNlJylcblxuZnVuY3Rpb24gdG9TdHJlYW1zMk9iaiAocykge1xuICByZXR1cm4gdG9TdHJlYW1zMihzLCB7IG9iamVjdE1vZGU6IHRydWUsIGhpZ2hXYXRlck1hcms6IDE2IH0pXG59XG5cbmZ1bmN0aW9uIHRvU3RyZWFtczJCdWYgKHMpIHtcbiAgcmV0dXJuIHRvU3RyZWFtczIocylcbn1cblxuZnVuY3Rpb24gdG9TdHJlYW1zMiAocywgb3B0cykge1xuICBpZiAoIXMgfHwgdHlwZW9mIHMgPT09ICdmdW5jdGlvbicgfHwgcy5fcmVhZGFibGVTdGF0ZSkgcmV0dXJuIHNcblxuICBjb25zdCB3cmFwID0gbmV3IHN0cmVhbS5SZWFkYWJsZShvcHRzKS53cmFwKHMpXG4gIGlmIChzLmRlc3Ryb3kpIHtcbiAgICB3cmFwLmRlc3Ryb3kgPSBzLmRlc3Ryb3kuYmluZChzKVxuICB9XG4gIHJldHVybiB3cmFwXG59XG5cbmNsYXNzIE11bHRpU3RyZWFtIGV4dGVuZHMgc3RyZWFtLlJlYWRhYmxlIHtcbiAgY29uc3RydWN0b3IgKHN0cmVhbXMsIG9wdHMpIHtcbiAgICBzdXBlcih7IC4uLm9wdHMsIGF1dG9EZXN0cm95OiB0cnVlIH0pXG5cbiAgICB0aGlzLl9kcmFpbmVkID0gZmFsc2VcbiAgICB0aGlzLl9mb3J3YXJkaW5nID0gZmFsc2VcbiAgICB0aGlzLl9jdXJyZW50ID0gbnVsbFxuICAgIHRoaXMuX3RvU3RyZWFtczIgPSAob3B0cyAmJiBvcHRzLm9iamVjdE1vZGUpID8gdG9TdHJlYW1zMk9iaiA6IHRvU3RyZWFtczJCdWZcblxuICAgIGlmICh0eXBlb2Ygc3RyZWFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcXVldWUgPSBzdHJlYW1zXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3F1ZXVlID0gc3RyZWFtcy5tYXAodGhpcy5fdG9TdHJlYW1zMilcbiAgICAgIHRoaXMuX3F1ZXVlLmZvckVhY2goc3RyZWFtID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHJlYW0gIT09ICdmdW5jdGlvbicpIHRoaXMuX2F0dGFjaEVycm9yTGlzdGVuZXIoc3RyZWFtKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLl9uZXh0KClcbiAgfVxuXG4gIF9yZWFkICgpIHtcbiAgICB0aGlzLl9kcmFpbmVkID0gdHJ1ZVxuICAgIHRoaXMuX2ZvcndhcmQoKVxuICB9XG5cbiAgX2ZvcndhcmQgKCkge1xuICAgIGlmICh0aGlzLl9mb3J3YXJkaW5nIHx8ICF0aGlzLl9kcmFpbmVkIHx8ICF0aGlzLl9jdXJyZW50KSByZXR1cm5cbiAgICB0aGlzLl9mb3J3YXJkaW5nID0gdHJ1ZVxuXG4gICAgbGV0IGNodW5rXG4gICAgd2hpbGUgKHRoaXMuX2RyYWluZWQgJiYgKGNodW5rID0gdGhpcy5fY3VycmVudC5yZWFkKCkpICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl9kcmFpbmVkID0gdGhpcy5wdXNoKGNodW5rKVxuICAgIH1cblxuICAgIHRoaXMuX2ZvcndhcmRpbmcgPSBmYWxzZVxuICB9XG5cbiAgX2Rlc3Ryb3kgKGVyciwgY2IpIHtcbiAgICBsZXQgc3RyZWFtcyA9IFtdXG4gICAgaWYgKHRoaXMuX2N1cnJlbnQpIHN0cmVhbXMucHVzaCh0aGlzLl9jdXJyZW50KVxuICAgIGlmICh0eXBlb2YgdGhpcy5fcXVldWUgIT09ICdmdW5jdGlvbicpIHN0cmVhbXMgPSBzdHJlYW1zLmNvbmNhdCh0aGlzLl9xdWV1ZSlcblxuICAgIGlmIChzdHJlYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2IoZXJyKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY291bnRlciA9IHN0cmVhbXMubGVuZ3RoXG4gICAgICBsZXQgZXIgPSBlcnJcbiAgICAgIHN0cmVhbXMuZm9yRWFjaChzdHJlYW0gPT4ge1xuICAgICAgICBkZXN0cm95KHN0cmVhbSwgZXJyLCBlcnIgPT4ge1xuICAgICAgICAgIGVyID0gZXIgfHwgZXJyXG4gICAgICAgICAgaWYgKC0tY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgY2IoZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBfbmV4dCAoKSB7XG4gICAgdGhpcy5fY3VycmVudCA9IG51bGxcblxuICAgIGlmICh0eXBlb2YgdGhpcy5fcXVldWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3F1ZXVlKChlcnIsIHN0cmVhbSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gdGhpcy5kZXN0cm95KGVycilcbiAgICAgICAgc3RyZWFtID0gdGhpcy5fdG9TdHJlYW1zMihzdHJlYW0pXG4gICAgICAgIHRoaXMuX2F0dGFjaEVycm9yTGlzdGVuZXIoc3RyZWFtKVxuICAgICAgICB0aGlzLl9nb3ROZXh0U3RyZWFtKHN0cmVhbSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzdHJlYW0gPSB0aGlzLl9xdWV1ZS5zaGlmdCgpXG4gICAgICBpZiAodHlwZW9mIHN0cmVhbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzdHJlYW0gPSB0aGlzLl90b1N0cmVhbXMyKHN0cmVhbSgpKVxuICAgICAgICB0aGlzLl9hdHRhY2hFcnJvckxpc3RlbmVyKHN0cmVhbSlcbiAgICAgIH1cbiAgICAgIHRoaXMuX2dvdE5leHRTdHJlYW0oc3RyZWFtKVxuICAgIH1cbiAgfVxuXG4gIF9nb3ROZXh0U3RyZWFtIChzdHJlYW0pIHtcbiAgICBpZiAoIXN0cmVhbSkge1xuICAgICAgdGhpcy5wdXNoKG51bGwpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50ID0gc3RyZWFtXG4gICAgdGhpcy5fZm9yd2FyZCgpXG5cbiAgICBjb25zdCBvblJlYWRhYmxlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZm9yd2FyZCgpXG4gICAgfVxuXG4gICAgY29uc3Qgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmICghc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZGVkICYmICFzdHJlYW0uZGVzdHJveWVkKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcignRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0UnKVxuICAgICAgICBlcnIuY29kZSA9ICdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSdcbiAgICAgICAgdGhpcy5kZXN0cm95KGVycilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvbkVuZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2N1cnJlbnQgPSBudWxsXG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgb25SZWFkYWJsZSlcbiAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25FbmQpXG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25DbG9zZSlcbiAgICAgIHN0cmVhbS5kZXN0cm95KClcbiAgICAgIHRoaXMuX25leHQoKVxuICAgIH1cblxuICAgIHN0cmVhbS5vbigncmVhZGFibGUnLCBvblJlYWRhYmxlKVxuICAgIHN0cmVhbS5vbmNlKCdlbmQnLCBvbkVuZClcbiAgICBzdHJlYW0ub25jZSgnY2xvc2UnLCBvbkNsb3NlKVxuICB9XG5cbiAgX2F0dGFjaEVycm9yTGlzdGVuZXIgKHN0cmVhbSkge1xuICAgIGlmICghc3RyZWFtKSByZXR1cm5cblxuICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcilcbiAgICAgIHRoaXMuZGVzdHJveShlcnIpXG4gICAgfVxuXG4gICAgc3RyZWFtLm9uY2UoJ2Vycm9yJywgb25FcnJvcilcbiAgfVxufVxuXG5NdWx0aVN0cmVhbS5vYmogPSBzdHJlYW1zID0+IChcbiAgbmV3IE11bHRpU3RyZWFtKHN0cmVhbXMsIHsgb2JqZWN0TW9kZTogdHJ1ZSwgaGlnaFdhdGVyTWFyazogMTYgfSlcbilcblxubW9kdWxlLmV4cG9ydHMgPSBNdWx0aVN0cmVhbVxuXG4vLyBOb3JtYWxpemUgc3RyZWFtIGRlc3Ryb3kgdy8gY2FsbGJhY2suXG5mdW5jdGlvbiBkZXN0cm95IChzdHJlYW0sIGVyciwgY2IpIHtcbiAgaWYgKCFzdHJlYW0uZGVzdHJveSB8fCBzdHJlYW0uZGVzdHJveWVkKSB7XG4gICAgY2IoZXJyKVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gb25jZShlciA9PiBjYihlciB8fCBlcnIpKVxuICAgIHN0cmVhbVxuICAgICAgLm9uKCdlcnJvcicsIGNhbGxiYWNrKVxuICAgICAgLm9uKCdjbG9zZScsICgpID0+IGNhbGxiYWNrKCkpXG4gICAgICAuZGVzdHJveShlcnIsIGNhbGxiYWNrKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multistream/index.js\n");

/***/ })

};
;